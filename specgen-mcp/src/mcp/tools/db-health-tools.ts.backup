import { EnhancedDatabaseConnection } from '../../database/enhanced-connection.js';

/**
 * MCP tool for checking database health and performing maintenance
 */
export const dbHealthCheckTool: any = {
  name: 'db_health_check',
  description: 'Check database connection health and integrity',
  inputSchema: {
    type: 'object',
    properties: {
      include_details: { type: 'boolean', default: false },
      auto_repair: { type: 'boolean', default: false }
    }
  },
  handler: async (args: any) => {
    try {
      // Get health status for all connections
      const healthStatus = EnhancedDatabaseConnection.getHealthStatus();
      
      let details: any = {};
      let repairActions: string[] = [];
      
      if (args?.include_details) {
        // Perform detailed health checks
        try {
          const db = EnhancedDatabaseConnection.getCurrentProjectConnection();
          
          // Check integrity
          const integrityResult = db.pragma('integrity_check');
          const isHealthy = Array.isArray(integrityResult) && integrityResult[0]?.integrity_check === 'ok';
          
          // Check WAL file status
          const walInfo = db.pragma('wal_checkpoint');
          
          // Get database stats
          const stats = {
            page_count: db.pragma('page_count'),
            freelist_count: db.pragma('freelist_count'),
            schema_version: db.pragma('schema_version'),
            user_version: db.pragma('user_version')
          };
          
          details = {
            integrity_check: integrityResult,
            wal_checkpoint_info: walInfo,
            database_stats: stats,
            is_healthy: isHealthy
          };
          
          // Auto-repair if requested and issues found
          if (args?.auto_repair && !isHealthy) {
            repairActions.push('Attempting WAL checkpoint...');
            EnhancedDatabaseConnection.checkpointAll();
            repairActions.push('WAL checkpoint completed');
          }
          
        } catch (error) {
          details.error = error instanceof Error ? error.message : String(error);
        }
      }
      
      return {
        success: true,
        health_status: healthStatus,
        details: args?.include_details ? details : undefined,
        repair_actions: repairActions,
        message: 'Database health check completed'
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }
};

/**
 * MCP tool for performing database maintenance operations
 */
export const dbMaintenanceTool: any = {
  name: 'db_maintenance',
  description: 'Perform database maintenance operations like WAL checkpoints and cleanup',
  inputSchema: {
    type: 'object',
    properties: {
      operation: { 
        type: 'string', 
        enum: ['checkpoint', 'vacuum', 'analyze', 'cleanup'], 
        default: 'checkpoint' 
      },
      force: { type: 'boolean', default: false }
    }
  },
  handler: async (args: any) => {
    try {
      const operation = args?.operation || 'checkpoint';
      const results: string[] = [];
      
      switch (operation) {
        case 'checkpoint':
          EnhancedDatabaseConnection.checkpointAll();
          results.push('WAL checkpoint completed on all connections');
          break;
          
        case 'vacuum':
          if (!args?.force) {
            return {
              success: false,
              error: 'VACUUM operation requires force=true flag for safety'
            };
          }
          try {
            const db = EnhancedDatabaseConnection.getCurrentProjectConnection();
            db.exec('VACUUM;');
            results.push('Database vacuum completed');
          } catch (error) {
            results.push(`Vacuum failed: ${error instanceof Error ? error.message : String(error)}`);
          }
          break;
          
        case 'analyze':
          try {
            const db = EnhancedDatabaseConnection.getCurrentProjectConnection();
            db.exec('ANALYZE;');
            results.push('Database analysis completed');
          } catch (error) {
            results.push(`Analysis failed: ${error instanceof Error ? error.message : String(error)}`);
          }
          break;
          
        case 'cleanup':
          // Perform gentle cleanup operations
          EnhancedDatabaseConnection.checkpointAll();
          try {
            const db = EnhancedDatabaseConnection.getCurrentProjectConnection();
            db.exec('PRAGMA optimize;');
            results.push('Database optimization completed');
          } catch (error) {
            results.push(`Optimization failed: ${error instanceof Error ? error.message : String(error)}`);
          }
          break;
          
        default:
          return {
            success: false,
            error: `Unknown maintenance operation: ${operation}`
          };
      }
      
      return {
        success: true,
        operation,
        results,
        message: `Maintenance operation '${operation}' completed`
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }
};

/**
 * MCP tool for getting database performance metrics
 */
export const dbMetricsTool: any = {
  name: 'db_metrics',
  description: 'Get database performance metrics and statistics',
  inputSchema: {
    type: 'object',
    properties: {
      include_query_planner: { type: 'boolean', default: false }
    }
  },
  handler: async (args: any) => {
    try {
      const db = EnhancedDatabaseConnection.getCurrentProjectConnection();
      
      // Get basic database metrics
      const metrics = {
        page_size: db.pragma('page_size'),
        page_count: db.pragma('page_count'),
        freelist_count: db.pragma('freelist_count'),
        cache_size: db.pragma('cache_size'),
        journal_mode: db.pragma('journal_mode'),
        synchronous: db.pragma('synchronous'),
        temp_store: db.pragma('temp_store'),
        mmap_size: db.pragma('mmap_size'),
        wal_autocheckpoint: db.pragma('wal_autocheckpoint')
      };
      
      // Calculate derived metrics
      const pageSize = Number(metrics.page_size) || 0;
      const pageCount = Number(metrics.page_count) || 0;
      const freelistCount = Number(metrics.freelist_count) || 0;
      
      const derived = {
        database_size_mb: Math.round((pageSize * pageCount) / (1024 * 1024) * 100) / 100,
        free_space_mb: Math.round((pageSize * freelistCount) / (1024 * 1024) * 100) / 100,
        fragmentation_percent: pageCount > 0 ? Math.round((freelistCount / pageCount) * 10000) / 100 : 0
      };
      
      let queryPlannerStats: any = undefined;
      
      if (args?.include_query_planner) {
        try {
          // Get some query planner statistics
          const specCount = db.prepare('SELECT COUNT(*) as count FROM specs').get() as { count: number };
          queryPlannerStats = {
            total_specs: specCount.count,
            has_fts_index: !!db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='specs_fts'").get()
          };
        } catch (error) {
          queryPlannerStats = { error: 'Failed to get query planner stats' };
        }
      }
      
      return {
        success: true,
        metrics,
        derived_metrics: derived,
        query_planner_stats: queryPlannerStats,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }
};

// Export all database health tools
export const dbHealthTools: any[] = [
  dbHealthCheckTool,
  dbMaintenanceTool,
  dbMetricsTool
];